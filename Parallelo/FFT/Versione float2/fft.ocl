#pragma OPENCL EXTENSION cl_khr_fp64 : enable
typedef double  real;
typedef double2 complex;
typedef double4 complex2;
typedef double8 complex4;

#define _2PI 6.283185307179586476925f

kernel void matinit(global int *out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0); //usiamo questa soluzione perchè più efficente
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    out[r*ncols+c] = r+c;
}

kernel void fft(global int* restrict src, global complex* restrict dest,
                int nrows, int ncols)
{
#if 0
    const int v = get_global_id(0);
    const int u = get_global_id(1);
#else
    const int u = get_global_id(0);
    const int v = get_global_id(1);
#endif

    if(v >= ncols || u >= nrows)
        return;
    complex acc = (complex)(0, 0);
    const real row_coeff = u/(real)nrows;
    const real col_coeff = v/(real)ncols;

    for(int row=0; row<nrows; ++row)
        for(int col=0; col<ncols; ++col)
        {
            int val = src[row*ncols+col];
            real r = _2PI * ((row*row_coeff) + (col*col_coeff));

            acc += (complex)(val*cos(r), -sin(r)*val);
        }
    dest[u*ncols+v] = (complex)(acc.x, acc.y);
}

kernel void fft4(global int4* restrict src, global complex* restrict dest,
                int nrows, int ncols) //multiplo di 4
{
#if 0
    const int v = get_global_id(0);
    const int u = get_global_id(1);
#else
    const int u = get_global_id(0);
    const int v = get_global_id(1);
#endif

    if(v >= ncols || u >= nrows)
        return;
    complex acc = (complex)(0, 0);
    const real row_coeff = u/(real)nrows;
    const real col_coeff = v/(real)ncols;

    for(int row=0; row<nrows; ++row)
        for(int col=0; col<ncols/4; ++col)
        {
            int4 val = src[row*ncols/4+col];
            complex2 r = (complex2)(
                                    (row*row_coeff) + ((4*col+0)*col_coeff),
                                    (row*row_coeff) + ((4*col+1)*col_coeff),
                                    (row*row_coeff) + ((4*col+2)*col_coeff),
                                    (row*row_coeff) + ((4*col+3)*col_coeff)
                                   );
            r *= _2PI;

            acc += (complex)(
                             (val.x*cos(r.x) + val.y*cos(r.y)) + (val.z*cos(r.z) + val.w*cos(r.w)),
                             (val.x*(-sin(r.x)) + val.y*(-sin(r.y))) + (val.z*(-sin(r.z)) + val.w*(-sin(r.w)))
                            );
        }
    dest[u*ncols+v] = (complex)(acc.x, acc.y);
}

kernel void fft_lmem(global int* restrict src, global complex* restrict dest,
                     local complex* restrict lmem, int nrows, int ncols)
{
    int gidx = get_group_id(0);
    int lidx = get_local_id(0);
    const int lws = get_local_size(0);
    const int nwg = get_global_size(0)/lws;
    const int numels = nrows*ncols;

    const int niters = (numels + nwg - 1)/nwg;
    for(int h = 0; h < niters; ++h)
    {
      int i = gidx + h*nwg; //work-group linear index
      int u = i/ncols;
      int v = i - (u*ncols);

      if(u >= nrows || v >= ncols)
          break;

      int el_per_wi = (numels + lws - 1)/lws;
      complex acc = (complex)(0, 0);
      const real row_coeff = u/(real)nrows;
      const real col_coeff = v/(real)ncols;

      for(int k = 0; k < el_per_wi; ++k)
      {
        int j = lidx + k*el_per_wi;
        int row = j/ncols;
        int col = j - (row*ncols);

        int val = src[row*ncols+col];
        real r = _2PI * ((row*row_coeff) + (col*col_coeff));
        acc += (complex)(val*cos(r), -sin(r)*val);
      }

      //dim local memory = niters * lws * sizeof()
      lmem[lidx + h*lws] = (complex)(acc.x, acc.y);
    }

    //barrier
    //riduzione in local memory
    //int local_numels = niters*lws;
    for(int attivi = lws/2; attivi >= 1; attivi /= 2)
    {
      barrier(CLK_LOCAL_MEM_FENCE);
      for(int i = 0; i < niters; ++i)
      {
        if(lidx < attivi)
        {
          int idx_r = lidx + lws*i;
          lmem[idx_r] += lmem[idx_r + attivi];
        }
      }
    }

    if(lidx == 0)
    {
      for(int i = 0; i < niters; ++i)
        dest[gidx + i*nwg] = lmem[i*lws];
    }
}

kernel void somma_lmem(global complex* restrict input, global complex* restrict output,
                       local complex* restrict lmem, int numels)
{
    const int gws = get_global_size(0);
    const int el_per_wi = (numels + gws - 1)/gws;

    int idx = get_global_id(0);
    complex acc = (complex)(0, 0);

    for(int i = 0; i < el_per_wi; ++i)
    {
        int idx_r = gws*i + idx;
        if(idx_r >= numels)
            break;
        acc.x += input[idx_r].x;
        acc.y += input[idx_r].y;
    }

    int lidx = get_local_id(0);
    int lws = get_local_size(0);

    lmem[lidx] = (complex)(acc.x, acc.y);

    for(int attivi = lws/2; attivi >= 1; attivi /= 2)
    {
        barrier(CLK_LOCAL_MEM_FENCE);

        if(lidx < attivi)
        {
            acc.x += lmem[lidx+attivi].x;
            acc.y += lmem[lidx+attivi].y;

            lmem[lidx] = (complex)(acc.x, acc.y);
        }
    }

    if(lidx == 0)
        output[get_group_id(0)] = (complex)(acc.x, acc.y);
}

kernel void somma_lmem2(global complex2* restrict input, global complex* restrict output,
                       local complex* restrict lmem, int numels)
{
    const int gws = get_global_size(0);
    const int quarts = numels/2;
    const int el_per_wi = (quarts + gws - 1)/gws;

    int idx = get_global_id(0);
    complex acc = (complex)(0, 0);

    for(int i = 0; i < el_per_wi; ++i)
    {
        int idx_r = gws*i + idx;
        if(idx_r >= quarts)
            break;

        complex2 val = input[idx_r]; //RE: s0, s2

        acc.x += (val.s0 + val.s2);
        acc.y += (val.s1 + val.s3);
    }

    int lidx = get_local_id(0);
    int lws = get_local_size(0);

    lmem[lidx] = (complex)(acc.x, acc.y);

    for(int attivi = lws/2; attivi >= 1; attivi /= 2)
    {
        barrier(CLK_LOCAL_MEM_FENCE);

        if(lidx < attivi)
        {
            acc += lmem[lidx+attivi];
            lmem[lidx] = (complex)(acc.x, acc.y);
        }
    }

    if(lidx == 0)
        output[get_group_id(0)] = (complex)(acc.x, acc.y);
}

kernel void somma_lmem4(global complex4* restrict input, global complex* restrict output,
                       local complex* restrict lmem, int numels)
{
    const int gws = get_global_size(0);
    const int quarts = numels/4;
    const int el_per_wi = (quarts + gws - 1)/gws;

    int idx = get_global_id(0);
    complex acc = (complex)(0, 0);

    for(int i = 0; i < el_per_wi; ++i)
    {
        int idx_r = gws*i + idx;
        if(idx_r >= quarts)
            break;

        complex4 val = input[idx_r];

        acc.x += (val.s0 + val.s2) + (val.s4 + val.s6);
        acc.y += (val.s1 + val.s3) + (val.s5 + val.s7);
    }

    int lidx = get_local_id(0);
    int lws = get_local_size(0);

    lmem[lidx] = (complex)(acc.x, acc.y);

    for(int attivi = lws/2; attivi >= 1; attivi /= 2)
    {
        barrier(CLK_LOCAL_MEM_FENCE);

        if(lidx < attivi)
        {
            acc += lmem[lidx+attivi];
            lmem[lidx] = (complex)(acc.x, acc.y);
        }
    }

    if(lidx == 0)
        output[get_group_id(0)] = (complex)(acc.x, acc.y);
}
