#pragma OPENCL EXTENSION cl_khr_fp64 : enable
typedef double real;

//MATINIT
kernel void matinit(global int *out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    out[r*ncols+c] = r+c;
}

//FILTRI
kernel void identity(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(r == 1 && c == 1)
        out[r*ncols+c] = 1.0;
    else
        out[r*ncols+c] = 0.0;
}

kernel void Nbox3(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    out[r*ncols+c] = 1.0/9;

}

kernel void Nbox5(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    out[r*ncols+c] = 1.0/25;

}

kernel void sobelX(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(c == 0 && (r == 0 || r == 2))
        out[r*ncols+c] = 1.0;
    else if(c == 0 && r == 1)
        out[r*ncols+c] = 2.0;
    else if(c == 2 && (r == 0 || r == 2))
        out[r*ncols+c] = -1.0;
    else if(c == 2 && r == 1)
        out[r*ncols+c] = -2.0;
    else
        out[r*ncols+c] = 0.0;
}

kernel void sobelY(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(r == 0 && (c == 0 || c == 2))
        out[r*ncols+c] = 1.0;
    else if(r == 0 && c == 1)
        out[r*ncols+c] = 2.0;
    else if(r == 2 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else if(r == 2 && c == 1)
        out[r*ncols+c] = -2.0;
    else
        out[r*ncols+c] = 0.0;
}

kernel void laplace(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(r == 0 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else if(r == 1 && c == 1)
        out[r*ncols+c] = 4.0;
    else if(r == 2 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else
        out[r*ncols+c] = 0.0;
}

kernel void sharp(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(r == 0 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else if(r == 1 && c == 1)
        out[r*ncols+c] = 5.0;
    else if(r == 2 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else
        out[r*ncols+c] = 0.0;
}

//Convoluzione
kernel void conv(global const real* restrict input, int nrows, int ncols,
                 global const real* restrict filter, int f_dim,
                 global real* restrict output)
{
#if 1
    const int v = get_global_id(0);
    const int u = get_global_id(1);
#else
    const int u = get_global_id(0);
    const int v = get_global_id(1);
#endif

    if(u >= nrows || v >= ncols)
        return;

    int offset = f_dim/2;
    real acc = 0.0;
    for(int x=0; x<f_dim; ++x)
        for(int y=0; y<f_dim; ++y)
        {
            int row = clamp((int)(u+(x-1)*offset), 0, nrows-1);
            int col = clamp((int)(v+(y-1)*offset), 0, ncols-1);
            acc += filter[x*f_dim+y]*input[row*ncols+col];
        }

    output[u*ncols+v] = acc;
}
