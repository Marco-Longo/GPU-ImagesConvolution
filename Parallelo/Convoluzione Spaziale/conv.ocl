#pragma OPENCL EXTENSION cl_khr_fp64 : enable
typedef float  real;
typedef float4 real4;

//MATINIT
kernel void matinit(global real *restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    //out[r*ncols+c] = 10*(ncols*r+c+1);
    out[r*ncols+c] = r+c;
}

//FILTRI
kernel void identity(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(r == 1 && c == 1)
        out[r*ncols+c] = 1.0;
    else
        out[r*ncols+c] = 0.0;
}

kernel void Nbox3(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    out[r*ncols+c] = 1.0/9;

}

kernel void Nbox5(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    out[r*ncols+c] = 1.0/25;

}

kernel void sobelX(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(c == 0 && (r == 0 || r == 2))
        out[r*ncols+c] = 1.0;
    else if(c == 0 && r == 1)
        out[r*ncols+c] = 2.0;
    else if(c == 2 && (r == 0 || r == 2))
        out[r*ncols+c] = -1.0;
    else if(c == 2 && r == 1)
        out[r*ncols+c] = -2.0;
    else
        out[r*ncols+c] = 0.0;
}

kernel void sobelY(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(r == 0 && (c == 0 || c == 2))
        out[r*ncols+c] = 1.0;
    else if(r == 0 && c == 1)
        out[r*ncols+c] = 2.0;
    else if(r == 2 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else if(r == 2 && c == 1)
        out[r*ncols+c] = -2.0;
    else
        out[r*ncols+c] = 0.0;
}

kernel void laplace(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(r == 0 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else if(r == 1 && c == 1)
        out[r*ncols+c] = 4.0;
    else if(r == 2 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else
        out[r*ncols+c] = 0.0;
}

kernel void sharp(global real* restrict out, int nrows, int ncols)
{
#if 0
    int r = get_global_id(0);
    int c = get_global_id(1);
#else
    int c = get_global_id(0);
    int r = get_global_id(1);
#endif

    if (c >= ncols || r >= nrows)
        return;

    if(r == 0 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else if(r == 1 && c == 1)
        out[r*ncols+c] = 5.0;
    else if(r == 2 && (c == 0 || c == 2))
        out[r*ncols+c] = -1.0;
    else
        out[r*ncols+c] = 0.0;
}

//Convoluzione
kernel void conv(global const real* restrict input, int nrows, int ncols,
                 global const real* restrict filter, int f_dim,
                 global real* restrict output)
{
#if 1
    const int v = get_global_id(0);
    const int u = get_global_id(1);
#else
    const int u = get_global_id(0);
    const int v = get_global_id(1);
#endif

    if(u >= nrows || v >= ncols)
        return;

    int offset = f_dim/2;
    real acc = 0.0;
    for(int x=0; x<f_dim; ++x)
        for(int y=0; y<f_dim; ++y)
        {
            int row = clamp((int)(u-offset+x), 0, nrows-1);
            int col = clamp((int)(v-offset+y), 0, ncols-1);
            acc += filter[x*f_dim+y]*input[row*ncols+col];
        }

    output[u*ncols+v] = acc;
}

kernel void conv4(global const real4* restrict input, int nrows, int ncols,
                  global const real* restrict filter, int f_dim,
                  global real4* restrict output)
{
#if 1
    const int v = 4*get_global_id(0);
    const int u = get_global_id(1);
#else
    const int u = get_global_id(0);
    const int v = get_global_id(1);
#endif

    const int cquarts = ncols/4;
    if(u >= nrows || v >= ncols)
        return;

    int offset = f_dim/2;
    real4 acc = (real4)(0.0, 0.0, 0.0, 0.0);
    global const real* restrict input_scalar = input;

    for(int x=0; x<f_dim; ++x)
        for(int y=0; y<f_dim; ++y)
        {
            int row = clamp((int)(u-offset+x), 0, nrows-1);
            int col = clamp((int)(v-offset+y), 0, ncols-1);

            real coeff = filter[x*f_dim+y];
            acc.x += coeff*input_scalar[row*ncols+(col+0)];
            acc.y += coeff*input_scalar[row*ncols+(col+1)];
            acc.z += coeff*input_scalar[row*ncols+(col+2)];
            acc.w += coeff*input_scalar[row*ncols+(col+3)];
        }

    output[u*cquarts+v/4] = acc;
}


//non funzionante
kernel void conv_lmem(global const real* restrict input, int nrows, int ncols,
                      global const real* restrict filter, int f_dim,
                      global real* restrict output, local real* lmem)
{
#if 1
    const int v = get_global_id(0);
    const int u = get_global_id(1);
#else
    const int u = get_global_id(0);
    const int v = get_global_id(1);
#endif
    int lidx = get_local_id(0);

    if(u < nrows || v < ncols)
        lmem[lidx] = input[u*ncols+v];

    barrier(CLK_LOCAL_MEM_FENCE);

    if(u >= nrows || v >= ncols)
        return;

    int offset = f_dim/2;
    real acc = 0.0;

    int gi = get_group_id(0);
    int lws = get_local_size(0);

    int min_i = gi * lws;
    int max_i = min_i + lws;

    for(int x=0; x<f_dim; ++x)
        for(int y=0; y<f_dim; ++y)
        {
            int row = clamp((int)(u-offset+x), 0, nrows-1);
            int col = clamp((int)(v-offset+y), 0, ncols-1);
            int i = row*ncols+col;

            real val = (i<max_i && i>min_i) ? lmem[i-min_i] : input[i];
            acc += filter[x*f_dim+y]*val;
        }

    output[u*ncols+v] = acc;
}
